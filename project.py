# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'project.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import image
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1035, 772)
        MainWindow.setStyleSheet("border-image: url(:/bn/FAN.png);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.btn_on = QtWidgets.QPushButton(self.centralwidget)
        self.btn_on.setGeometry(QtCore.QRect(30, 170, 71, 71))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.btn_on.setFont(font)
        self.btn_on.setStyleSheet("border-image: url(:/bn/on.png);\n"
"color: rgb(255, 255, 255);")
        self.btn_on.setObjectName("btn_on")
        self.btn_off = QtWidgets.QPushButton(self.centralwidget)
        self.btn_off.setGeometry(QtCore.QRect(110, 170, 81, 71))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.btn_off.setFont(font)
        self.btn_off.setStyleSheet("border-image: url(:/bn/off.png);\n"
"color: rgb(255, 255, 255);")
        self.btn_off.setObjectName("btn_off")
        self.slider = QtWidgets.QSlider(self.centralwidget)
        self.slider.setGeometry(QtCore.QRect(50, 270, 111, 31))
        self.slider.setStyleSheet("border-image: url(:/bn/240_F_567678952_nRzV9wz1lyOH3VFVGllofOgv7xX5NXWk.jpg);")
        self.slider.setOrientation(QtCore.Qt.Horizontal)
        self.slider.setObjectName("slider")

        # Thiết lập giá trị tối thiểu và tối đa cho slider
        self.slider.setMinimum(0)
        self.slider.setMaximum(1)
        # Kết nối sự kiện thay đổi giá trị của slider với một hàm xử lý
        self.slider.valueChanged.connect(self.handleSliderChange)


        self.btn_on_off = QtWidgets.QPushButton(self.centralwidget)
        self.btn_on_off.setGeometry(QtCore.QRect(60, 330, 81, 71))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.btn_on_off.setFont(font)
        self.btn_on_off.setStyleSheet("border-image: url(:/bn/on_off.png);\n"
"color: rgb(0, 0, 0);")
        self.btn_on_off.setObjectName("btn_on_off")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(50, 440, 111, 41))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.mode_2 = QtWidgets.QPushButton(self.centralwidget)
        self.mode_2.setGeometry(QtCore.QRect(100, 530, 71, 51))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.mode_2.setFont(font)
        self.mode_2.setStyleSheet("border-image: url(:/bn/technology-abstract-circuit-board-texture-background-high-tech-futuristic-circuit-board-banner-wallpaper-digital-data-engineering-electronic-motherboard-illustration-vector.jpg);\n"
"color: rgb(255, 255, 127);")
        self.mode_2.setObjectName("mode_2")
        self.exit = QtWidgets.QPushButton(self.centralwidget)
        self.exit.setGeometry(QtCore.QRect(190, 530, 71, 51))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.exit.setFont(font)
        self.exit.setStyleSheet("border-image: url(:/bn/technology-abstract-circuit-board-texture-background-high-tech-futuristic-circuit-board-banner-wallpaper-digital-data-engineering-electronic-motherboard-illustration-vector.jpg);\n"
"color: rgb(255, 255, 127);")
        self.exit.setObjectName("exit")
        self.mode_1 = QtWidgets.QPushButton(self.centralwidget)
        self.mode_1.setGeometry(QtCore.QRect(10, 530, 71, 51))
        font = QtGui.QFont()
        font.setPointSize(9)
        font.setBold(True)
        font.setWeight(75)
        self.mode_1.setFont(font)
        self.mode_1.setStyleSheet("border-image: url(:/bn/technology-abstract-circuit-board-texture-background-high-tech-futuristic-circuit-board-banner-wallpaper-digital-data-engineering-electronic-motherboard-illustration-vector.jpg);\n"
"color: rgb(255, 255, 127);")
        self.mode_1.setObjectName("mode_1")
        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setGeometry(QtCore.QRect(740, 200, 311, 361))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(260, 30, 541, 41))
        font = QtGui.QFont()
        font.setPointSize(22)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("border-image: url(:/bn/technology-abstract-circuit-board-texture-background-high-tech-futuristic-circuit-board-banner-wallpaper-digital-data-engineering-electronic-motherboard-illustration-vector.jpg);\n"
"color: rgb(255, 255, 0);")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(20, 20, 201, 141))
        self.label_2.setStyleSheet("border-image: url(:/bn/BN.png);")
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(240, 720, 591, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("border-image: url(:/bn/technology-abstract-circuit-board-texture-background-high-tech-futuristic-circuit-board-banner-wallpaper-digital-data-engineering-electronic-motherboard-illustration-vector.jpg);\n"
"color: rgb(255, 255, 0);")
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(300, 220, 161, 121))
        self.label_4.setStyleSheet("border-image: url(:/bn/fan_off.png);")
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(550, 210, 161, 121))
        self.label_5.setStyleSheet("border-image: url(:/bn/laptop_off.png);")
        self.label_5.setText("")
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(300, 480, 161, 121))
        self.label_6.setStyleSheet("border-image: url(:/bn/camera_off.png);")
        self.label_6.setText("")
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(540, 480, 161, 121))
        self.label_7.setStyleSheet("border-image: url(:/bn/tv_off.png);")
        self.label_7.setText("")
        self.label_7.setObjectName("label_7")
        self.btn_on.raise_()
        self.btn_off.raise_()
        self.slider.raise_()
        self.btn_on_off.raise_()
        self.frame.raise_()
        self.mode_2.raise_()
        self.exit.raise_()
        self.mode_1.raise_()
        self.label.raise_()
        self.label_2.raise_()
        self.label_3.raise_()
        self.frame_2.raise_()
        self.label_4.raise_()
        self.label_5.raise_()
        self.label_6.raise_()
        self.label_7.raise_()
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.btn_on.clicked.connect(self.on)
        self.btn_off.clicked.connect(self.off)

        self.tt1 = True
        self.btn_on_off.clicked.connect(self.OnOff)

        self.mode = True
        self.tt_mode_1 = True
        self.tt_mode_2 = True
        self.mode_1.clicked.connect(self.mode1)
        self.mode_2.clicked.connect(self.mode2)
        self.exit.clicked.connect(self.tt_exit)

        self.state = True
        self.frame = QtWidgets.QCheckBox(self.frame)
        self.frame.stateChanged.connect(self.handleSwitchStateChanged)
        self.frame.setGeometry(QtCore.QRect(0, 10, 121, 31))

        self.frame.setStyleSheet("""
QCheckBox::indicator {
    border: none;
    background: white; /* Màu nền của "nút trượt" */
    width: 50px; /* Điều chỉnh chiều rộng của "nút trượt" */
    height: 31px; /* Điều chỉnh chiều cao của "nút trượt", phù hợp với QFrame */
    border-radius: 15px; /* Làm tròn góc */
}
QCheckBox::indicator:checked {
    background: #ffff00; /* Màu khi checked */
    position: absolute;
    left: 65px; /* Đẩy "nút trượt" sang phải khi checked */
}
QCheckBox::indicator:unchecked {
    background: #d5d5d5; /* Màu khi unchecked */
    position: absolute;
    right: 1px; /* Đẩy "nút trượt" sang trái khi unchecked */
}
""")
  

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.btn_on.setText(_translate("MainWindow", "ON"))
        self.btn_off.setText(_translate("MainWindow", "OFF"))
        self.btn_on_off.setText(_translate("MainWindow", "ON/OFF"))
        self.mode_2.setText(_translate("MainWindow", "MODE 2"))
        self.exit.setText(_translate("MainWindow", "EXIT"))
        self.mode_1.setText(_translate("MainWindow", "MODE 1"))
        self.label.setText(_translate("MainWindow", "IOT PROJECT"))
        self.label_3.setText(_translate("MainWindow", "NGUYỄN LÊ BÍCH NGỌC                      21161339"))

    def on(self):
        if self.mode:
                self.label_4.setStyleSheet("image:url(:/bn/fan_on);")
    def off(self):
        if self.mode:
                self.label_4.setStyleSheet("image:url(:/bn/fan_off);")

    def OnOff(self):
        #global tt1
        self.tt1 = not self.tt1
        if self.tt1 & self.mode:
                self.label_6.setStyleSheet("image: url(:/bn/camera_off);")
        else: 
                if self.mode:
                        self.label_6.setStyleSheet("image: url(:/bn/camera_on);")
    def addMatplotlib(self):
        # Tạo Figure và Canvas của Matplotlib
        self.figure = Figure()
        self.canvas = FigureCanvas(self.figure)

        # Tạo một QVBoxLayout trong QFrame
        self.layoutVertical = QtWidgets.QVBoxLayout(self.frame_2)  
        self.layoutVertical.addWidget(self.canvas)

        # Thêm biểu đồ vào Canvas
        self.plot()

    def plot(self):
        # Vẽ biểu đồ. 
        
        working_days = ['Mon-Fri','Sar-Sun']
        casual_avg = [440, 630]

        ax = self.figure.add_subplot(111)  # Tạo một subplot
        ax.bar(working_days, casual_avg)  # Vẽ biểu đồ cột với dữ liệu mới
        
       # ax.set_title('Average Casual Counts')  # Đặt tiêu đề cho biểu đồ
        ax.set_ylabel('Average Count')  # Đặt nhãn cho trục y
       # ax.set_xlabel('Day Type')  # Đặt nhãn cho trục x

        self.canvas.draw()  # Vẽ biểu đồ
    def mode1(self):
        self.mode = False
        self.tt_mode_1 = not self.tt_mode_1
        if self.tt_mode_1:
                self.label_4.setStyleSheet("image:url(:/bn/fan_off);")
                self.label_6.setStyleSheet("image: url(:/bn/camera_off);")
        else: 
                self.label_4.setStyleSheet("image:url(:/bn/fan_on);")
                self.label_6.setStyleSheet("image:url(:/bn/camera_on);")

    def mode2(self):
        self.mode = False
        self.tt_mode_2 = not self.tt_mode_2
        if self.tt_mode_2:
                self.label_5.setStyleSheet("image:url(:/bn/laptop_off);")
                self.label_7.setStyleSheet("image:url(:/bn/tv_off);")
        else: 
                self.label_5.setStyleSheet("image:url(:/bn/laptop_on);")

                self.label_7.setStyleSheet("image:url(:/bn/tv_on);")

    def tt_exit(self):
        self.mode = True
    def handleSwitchStateChanged(self, state):
        if self.mode:
                if state == QtCore.Qt.Checked:  
                        #self.switch_2.setStyleSheet("background-color:#ffff0 ; border-radius: 15px;")  # Màu vàng
                        self.label_7.setStyleSheet("image:url(:/bn/tv_on);")
                else:
                        #self.switch_2.setStyleSheet("background-color:#d5d5d5 ; border-radius: 15px;")  # Màu xám
                        self.label_7.setStyleSheet("image:url(:/bn/tv_off);")

    
    def handleSliderChange(self, value):
        if self.mode:
                if value == 0:
                        # Xử lý cho trạng thái 0
                       self.label_5.setStyleSheet("image: url(:/bn/laptop_off);")
                else:
                        # Xử lý cho trạng thái 1
                        self.label_5.setStyleSheet("image: url(:/bn/laptop_on);")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    ui.addMatplotlib()  # Gọi hàm để thêm Matplotlib vào QFrame vẽ biểu đồ
    MainWindow.show()
    sys.exit(app.exec_())
